import numpy as np
import matplotlib.pyplot as plt

# Define the differential equation for Newton's Law of Cooling
def newtons_law_of_cooling(T, t, T_env, k):
    dTdt = -k * (T - T_env)
    return dTdt

# Solve the differential equation using Euler's method
def euler_method(func, initial_condition, t_values, *args):
    T_values = [initial_condition]
    dt = t_values[1] - t_values[0]

    for i in range(1, len(t_values)):
        T = T_values[-1]
        dTdt = func(T, t_values[i-1], *args)
        T_new = T + dTdt * dt
        T_values.append(T_new)

    return np.array(T_values)

# Parameters
T_initial = 100  # Initial temperature of the object
T_env = 25       # Temperature of the environment
k = 0.1          # Proportionality constant
t_values = np.linspace(0, 60, 100)  # Time values for evaluation

# Solve the differential equation
T_values = euler_method(newtons_law_of_cooling, T_initial, t_values, T_env, k)

# Plot the results
plt.plot(t_values, T_values, label='Temperature of the object')
plt.axhline(y=T_env, color='r', linestyle='--', label='Temperature of the environment')
plt.title("Newton's Law of Cooling")
plt.xlabel('Time')
plt.ylabel('Temperature')
plt.legend()
plt.grid(True)
plt.show()
